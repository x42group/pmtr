.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "PMTR" "8" "January 2020" "" ""
.
.SH "NAME"
\fBpmtr\fR \- Simple supervisory daemon for linux services
.
.SH "SYNOPSIS"
pmtr(8) is a simple supervisory daemon for linux services\. pmtr(8) runs under systemd as well as other init mechanisms like sysvinit, etc\. It can also run as process 1 inside a container\.
.
.br
When installing on many flavors or Linux, it can detect the nost init and set itself up to start at boot appropriately\.
.
.SH "DESCRIPTION"
Pmtr has a few goals:
.
.IP "\(bu" 4
to have one configuration file listing all processes to run
.
.IP "\(bu" 4
to exist under (not to replace) the host init system
.
.IP "\(bu" 4
to run under various host init systems
.
.IP "\(bu" 4
to consume few resource
.
.IP "\(bu" 4
to have few features
.
.IP "" 0
.
.P
It is especially useful in container (Docker, etc\.) contexts to manage servers and processes\.
.
.br
Unlike other systems (systemd, supervisord), pmtr is very easy to configure and monitor\.
.
.br
While easy to configure, it supports many useful features such as control via an optional UDP socket, allows for automatic restart of processes on a time interval or when exited, stderr/stdout log to arbitrary files, set nice priority\. pmtr has been deployed on a wide variety of Linux platforms for many uses, including Arch, Alpine, Debian, Ubuntu, CentOS/RHEL, Amazon Linux, Raspberry Pi, Beaglebone, and Yocto\.
.
.P
It is written in C, supports Linux only, and is MIT licensed\.
.
.SH "USAGE"
When pmtr is started, it starts all the jobs in \fBpmtr\.conf\fR, likewise, pmtr terminates them when it is stopped\.
.
.P
In practice the host init system \- often systemd \- manages all the standard OS services\. pmtr(8) is generally used to run local software \- the parts that make up an appliance, often comprising a dozen or two dozen jobs that function together\.
.
.P
There are many options to use inside the job, listed later below\.
.
.P
Processes that run under pmtr should stay in the foreground, exit on SIGTERM or SIGKILL, and clean up after their own sub\-processes when exiting\.
.
.P
If a job exits, pmtr restarts it\. If it exits too quickly \- less than 10 seconds after it started \- pmtr delays its restart 10 seconds to avoid rapid cycling\.
.
.P
If the operator edits \fBpmtr\.conf\fR and saves the file, the changes take effect immediately\. There is no need to tell pmtr to reload its configuration file\.
.
.SH "OPTIONS"
The host init system normally runs pmtr at system boot\. You can instead run pmtr manually\. Or, it can be the init process inside a container\. In these use cases, the following command line options may be useful\.
.
.TP
\fB\-h\fR, \fB\-\-help\fR
Displays the help screen\.
.
.TP
\fB\-F\fR
stay in foreground (enabled by default when PID 1)
.
.TP
\fB\-I\fR
echo syslog to stderr (enabled by default)
.
.TP
\fB\-c <file>\fR
specify configuration file
.
.TP
\fB\-t\fR
test syntax (parse config file and exit)
.
.TP
\fB\-v\fR
verbose logging (repeatable), \-vv shows parsing
.
.TP
\fB\-p <file>\fR
make pidfile
.
.SH "CONFIGURATION"
The configuration file \fB/etc/pmtr\.conf\fR drives pmtr\.
.
.P
The config file can be changed using a command line option (\fB\-c\fR) when running pmtr from the command line\.
.
.P
As shown previously it consists of zero or more job definitions\. A job is just a process definition\. It looks like:
.
.IP "" 4
.
.nf

  job {
    name bitcoin\-daemon
    dir /home/bitcoin
    cmd /usr/local/bin/bitcoind
    user bitcoin
    env HOME=/home/bitcoin
  }
.
.fi
.
.IP "" 0
.
.P
A job must have a \fBname\fR (used for logging only) and a \fBcmd\fR\. Everything else in the curly braces optional\.
.
.IP "\(bu" 4
Order does not matter\.
.
.IP "\(bu" 4
Indentation is optional\.
.
.IP "\(bu" 4
Blank lines are ok\.
.
.IP "\(bu" 4
Comments start with \fB#\fR\.
.
.IP "" 0
.
.SH "PMTR\.CONF OPTIONS"
The full list of options that may appear inside a job are listed here\.
.
.IP "\(bu" 4
name : descriptive job name used for logging \- must be unique
.
.IP "\(bu" 4
cmd : executable (fully\-qualified) and any arguments
.
.IP "\(bu" 4
dir : working directory (fully qualified) to run the process in
.
.IP "\(bu" 4
out : send stdout to this file
.
.IP "\(bu" 4
err : send stderr to this file
.
.IP "\(bu" 4
in : take stdin from this file
.
.IP "\(bu" 4
env : environment variable to set (repeatable)
.
.IP "\(bu" 4
user : unix username under whose id to run the process
.
.IP "\(bu" 4
nice : unix priority between \-19 (highest) and 20 (lowest)
.
.IP "\(bu" 4
cpu : CPU affinity as hex mask (0xABCD) or number/ranges (0,2\-4)
.
.IP "\(bu" 4
ulimit : process ulimits
.
.IP "\(bu" 4
bounce : | a time interval to restart the process
.
.IP "\(bu" 4
depends : files to watch, any changes induce the job to restart
.
.IP "\(bu" 4
disable : disable the job
.
.IP "\(bu" 4
wait : (special) wait for the job to finish before going on
.
.IP "\(bu" 4
once : (special) do not restart the job
.
.IP "" 0
.
.P
More details on each option follows\.
.
.SS "cmd"
.
.IP "\(bu" 4
Specifies the \fIabsolute path\fR to the executable (there is no $PATH searching!)
.
.IP "\(bu" 4
It may have arguments after the executable (e\.g\. \fBcmd /usr/bin/python rest\.py\fR)
.
.IP "\(bu" 4
Use double\-quotes to make one argument from the quoted string\.
.
.IP "\(bu" 4
No shell expansion: no wildcards, backticks, variables, etc\.
.
.IP "" 0
.
.P
If you need shell features in your command, wrap it with a shell script\. You can also use a quoted string as a shell script like this:
.
.IP "" 4
.
.nf

  job {
    name api
    cmd /bin/bash \-c "ifconfig eth1 up; sleep 5; exec /api/rest\.py"
  }
.
.fi
.
.IP "" 0
.
.SS "env"
.
.IP "\(bu" 4
Use to push an environment variable into a job, e\.g\. \fBenv DEBUG=1\fR\.
.
.IP "\(bu" 4
Use repeatedly on separate lines to set multiple environment variables\.
.
.IP "" 0
.
.SS "disable"
.
.IP "\(bu" 4
Use \fBdisable\fR on a line by itself to make the job disabled\.
.
.IP "\(bu" 4
This is sometimes quicker than commenting out the whole job\.
.
.IP "" 0
.
.SS "out, err, in"
.
.IP "\(bu" 4
Use \fBout\fR and \fBerr\fR to send stdout or stderr to a file\.
.
.IP "\(bu" 4
stdout and stderr go to syslog by default\.
.
.IP "\(bu" 4
stdin defaults to \fB/dev/null\fR; use \fBin\fR to override
.
.IP "" 0
.
.SS "nice"
.
.IP "\(bu" 4
This changes the process priority
.
.IP "\(bu" 4
Takes a number in the range \-19 (highest priority) to 20 (lowest)
.
.IP "" 0
.
.SS "cpu"
.
.IP "\(bu" 4
This sets the CPU affinity\- the list of CPU\'s the task can run on
.
.IP "\(bu" 4
Takes a CPU number (e\.g\. 0) or range (e\.g\. 2\-4) or a mix (e\.g\. 0,2\-4)
.
.IP "\(bu" 4
Alternatively, can take a 0x\-prefixed hex mask (e\.g\. 0x8f)
.
.IP "\(bu" 4
Any CPUs in the set that are physically absent are ignored
.
.IP "" 0
.
.SS "user"
.
.IP "\(bu" 4
Specifies the unix username to run the process as\.
.
.IP "\(bu" 4
That user\'s uid/gid becomes those of the process\.
.
.IP "\(bu" 4
Defaults to root (when pmtr is running as root)
.
.IP "" 0
.
.SS "depends"
.
.IP "\(bu" 4
Specifies a block of one or more files that the job depends on\.
.
.IP "\(bu" 4
pmtr watches the dependencies for changes to their content\.
.
.IP "\(bu" 4
Pmtr restarts the job if a change is detected\.
.
.IP "" 0
.
.IP "" 4
.
.nf

  job {
    name bitcoin\-daemon
    dir /home/bitcoin
    cmd /usr/bin/bitcoind
    user bitcoin
    env HOME=/home/bitcoin
    depends {
      /home/bitcoin/\.bitcoin/bitcoin\.conf
    }
  }
.
.fi
.
.IP "" 0
.
.SS "bounce every"
.
.IP "\(bu" 4
Use \fBbounce every\fR to restart a job on a periodic interval\.
.
.IP "\(bu" 4
It takes a number and unit [smhd] e\.g\. \fBbounce every 1d\fR\.
.
.IP "\(bu" 4
Units [smhd] are seconds, minutes, hours or days\.
.
.IP "\(bu" 4
The exact timing of the restart is approximate\.
.
.IP "" 0
.
.SS "ulimit"
.
.IP "\(bu" 4
Use to modify the system resource limits for the job\.
.
.IP "\(bu" 4
Takes a flag and value, e\.g\., \fBulimit \-n 30\fR\.
.
.IP "\(bu" 4
Values are numeric or the keyword \fBinfinity\fR\.
.
.IP "" 0
.
.P
To see the current limits on a process by its PID:
.
.IP "" 4
.
.nf

cat /proc/<pid>/limits
.
.fi
.
.IP "" 0
.
.P
Pmtr sets both the "hard" and "soft" limit to the same value\. Any error in setting the limit is logged to syslog\.
.
.P
See \fBman prlimit\fR for technical descriptions of each limit\. In the \fBbash\fR shell, \fBulimit \-a\fR and \fBhelp ulimit\fR display the limits and a list of flags and descriptions respectively\.
.
.P
The units are discussed in the prlimit(2) man page\.
.
.SS "wait/once"
.
.IP "\(bu" 4
Used for setup jobs that need not be restarted\.
.
.IP "\(bu" 4
\fBwait\fR pauses the startup of subsequent jobs\.
.
.IP "\(bu" 4
\fBonce\fR tells pmtr not to restart this job\.
.
.IP "" 0
.
.IP "" 4
.
.nf

    job {
      name initial\-setup
      cmd /bin/mkdir /dev/shm/go
      wait
      once
    }
.
.fi
.
.IP "" 0
.
.SH "LOGGING"
Logging from pmtr goes to syslog\. Typically these logs go to \fB/var/log/syslog\fR or \fB/var/log/messages\fR\. Check the syslog after any change to \fBpmtr\.conf\fR\. Errors in parsing \fBpmtr\.conf\fR are logged there, as well as job start or exit events\. On systemd\-based hosts, you can also use \fBjournalctl \-u pmtr\fR to see pmtr logs\.
.
.SH "JOB EXITS"
If a job terminates by itself, when pmtr did not signal it to exit, (and the job does not have the \fBonce\fR option), pmtr restarts it\. However, if it exited within 10 seconds of when it started, pmtr waits 10 seconds to restart it\. The 10\-second wait prevents rapid process cycling\. Also, a job that\'s waiting for something (like a network resource to come up) can be designed to exit instead of retry, relying on pmtr to restart it periodically to try again\.
.
.P
Pmtr terminates a job when it is deleted, disabled, or altered in \fBpmtr\.conf\fR, or is being bounced due to the \fBbounce every\fR option; or because pmtr itself is being shut down\. To terminate a job, pmtr sends SIGTERM to it, then SIGKILL shortly afterward, if it\'s still running\.
.
.SH "IN A CONTAINER"
When pmtr is the init entrypoint (process 1) in a container, it stays in the foreground by default\. An example invocation command is shown\.
.
.P
# container entrypoint /usr/bin/pmtr \-IFc /path/to/pmtr\.conf
.
.SH "UDP CONTROL"
NOTE: This feature is disabled by default\.
.
.P
These options may appear in \fBpmtr\.conf\fR at the global scope\.
.
.IP "" 4
.
.nf

  report to udp://127\.0\.0\.1:9999
  listen on udp://0\.0\.0\.0:10000
.
.fi
.
.IP "" 0
.
.P
The \fBreport to\fR option designates a remote address and port to which pmtr should send a a UDP packet every ten seconds\. The packet payload lists the job names, enabled or disabled status, and elapsed runtimes in simple text\. If the \fBreport to\fR address falls in the multicast UDP range (e\.g\. 239\.0\.0\.1, etc), the specification may include a trailing interface, e\.g\., \fBreport to udp://239\.0\.0\.1:9999@eth2\fR to designate the interface from which the multicast UDP datagrams should egress\.
.
.P
The \fBlisten on\fR option allows jobs to be remotely enabled or disabled\. It specifies a UDP address and port that pmtr should listen on for datagrams of form \fBenable abc\fR or \fBdisable abc\fR, where \'abc\' is a job name\. The address 0\.0\.0\.0 can be used as a shortcut to denote "any address" on this system\. The effect is temporary; the settings in pmtr\.conf resume precedence when it\'s edited or pmtr is restarted\.
.
.P
These options are considered experimental and may be replaced or removed\.
.
.SH "EXAMPLES"
Here is an example pmtr\.conf:
.
.IP "" 4
.
.nf

    job {
    name tunnel
    cmd /usr/bin/ssh \-i key \-TNL 5901:127\.0\.0\.1:5901 192\.168\.0\.1
    }

    job {
    name bitcoin\-daemon
    dir /home/bitcoin
    cmd /usr/local/bin/bitcoind
    user bitcoin
    env HOME=/home/bitcoin
    cpu 0\-8
    }

    job {
    name capture
    dir /data
    cmd /usr/sbin/tcpdump \-i eth0 \-s 0 \-G 10 \-w %Y%m%d%H%M%S\.pcap
.
.fi
.
.IP "" 0
.
.SH "AUTHOR"
.
.IP "\(bu" 4
Software: Troy Hanson \fItdh@tkhanson\.net\fR
.
.IP "\(bu" 4
Package Mantainer: Michael Moore \fIm@x42\.group\fR
.
.IP "" 0

